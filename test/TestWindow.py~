# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

from locale import gettext as _

from gi.repository import Gtk # pylint: disable=E0611
from gi.repository.GdkPixbuf import Pixbuf, InterpType
import logging
logger = logging.getLogger('test')

from test_lib import Window
from test.AboutTestDialog import AboutTestDialog
from test.PreferencesTestDialog import PreferencesTestDialog

# See test_lib.Window.py for more details about how this class works
class TestWindow(Window):
    __gtype_name__ = "TestWindow"
    
    def finish_initializing(self, builder): # pylint: disable=E1002
        """Set up the main window"""
        super(TestWindow, self).finish_initializing(builder)

        self.AboutDialog = AboutTestDialog
        self.PreferencesDialog = PreferencesTestDialog
        self.keywordField = self.builder.get_object("keywordField")
        self.treeview = self.builder.get_object("treeView")
        self.model = self.builder.get_object("model") #this is lisStore
       
        self.selectedFiles = []
        # Code for other initialization actions should be added here.
    
    def on_keywordField_activate(self, widget):
        searchString =  widget.get_text()      
        print searchString

        #HERE we connect with database and retrieve from it the various entries
        # and then we populate the list and display images. 
        #after recieving things from Arnab's wrapper
       # model = Gtk.ListStore(gtk.gdk.Pixbuf, str) #str will contain image-file-names
#        treeview = Gtk.TreeView(model) #need modifications when rendering
        #self.treeview.set_model(model)
        self.model.append([Pixbuf.new_from_file('data/media/background.png'),'data/media/background.png'])#treeitr the index in liststore to which entry is done
        self.model.append([Pixbuf.new_from_file('data/media/download.jpg'),'data/media/download.jpg'])
       # self.model.append([Pixbuf.new_from_file('data/media/background.png'),Pixbuf.new_from_file('data/media/download.jpg')])
        renderer = Gtk.CellRendererPixbuf() 

        column = Gtk.TreeViewColumn('',renderer, pixbuf=0)
        self.treeview.insert_column(column,0)
        #column = Gtk.TreeViewColumn('Icon',renderer, pixbuf=1)
        #column = Gtk.TreeViewColumn()
        #self.treeview.append_column(column)

        #title = Gtk.CellRendererPixbuf()
        #author = Gtk.CellRendererPixbuf()

        #column.pack_start(title, True)
        #column.pack_start(author, True)

        #column.add_attribute(title, "pixbuf", 0)
        #column.add_attribute(author, "pixbuf", 1)

        #self.treeview.append_column(column)
       # renderer = Gtk.CellRendererText()
        #column = Gtk.TreeViewColumn('Text', renderer, text=1)
        #self.treeview.append_column(column)
        
    def on_addToBasket_clicked(self,widget):
        selection = self.treeview.get_selection()
        (model, pathlist) = selection.get_selected_rows()
        for path in pathlist :
            tree_iter = model.get_iter(path)
            value = model.get_value(tree_iter,1)
            self.selectedFiles.append(value)
            print value   
    def on_startOver_clicked(self,widget):
    #clear the screen and selectedFiles buffer
       print "here"  
    
    def on_openSelected_clicked(self,widget):
        print "here1"     
        # HERE we will open various files

    def on_doneSelection_clicked(self,widget):
        self.model.clear()
        for filePath in self.selectedFiles:
            print filePath #write appropriate code to load these files  
    def on_addToIndex_clicked(self,widget):
        dialog = gtk.FileChooserDialog("Open..",
                               None,
                               gtk.FILE_CHOOSER_ACTION_OPEN,
                               (gtk.STOCK_CANCEL, gtk.ResponseType.CANCEL,
                                gtk.STOCK_OPEN, gtk.ResponseType.OK))
        dialog.set_default_response(gtk.RESPONSE_OK)
        response = dialog.run()

      #  if gtk_dialog_run(GTK_DIALOG (dialog)) == GTK_RESPONSE_ACCEPT:
       #     print "yes"
#       else:
 #           print "no"
#        gtk_widget_destroy (dialog);
        


